apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  name: system
---
apiVersion: v1
kind: Service
metadata:
  name: controller-manager-service
  namespace: system
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
spec:
  selector:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
  ports:
  - port: 443
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    controller-tools.k8s.io: "1.0"
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      controller-tools.k8s.io: "1.0"
  serviceName: controller-manager-service
  template:
    metadata:
      labels:
        control-plane: controller-manager
        controller-tools.k8s.io: "1.0"
    spec:
      containers:
      - command:
        - /manager
        image: controller:latest
        imagePullPolicy: Always
        name: manager
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SECRET_NAME
            value: $(WEBHOOK_SECRET_NAME)
        # resources:
        #   limits:
        #     cpu: 100m
        #     memory: 30Mi
        #   requests:
        #     cpu: 100m
        #     memory: 20Mi
        ports:
        - containerPort: 9876
          name: webhook-server
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/cert
          name: cert
          readOnly: true
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-secret
---
apiVersion: v1
kind: Service
metadata:
  name: controller-backend-service
  namespace: system
  labels:
    control-plane: controller-backend
    controller-tools.k8s.io: "1.0"
spec:
  selector:
    control-plane: controller-backend
    controller-tools.k8s.io: "1.0"
  ports:
  - name: backend
    port: 8080
    targetPort: 8080
    protocol: TCP
  type:
    NodePort
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: controller-backend
  namespace: system
  labels:
    control-plane: controller-backend
    controller-tools.k8s.io: "1.0"
spec:
  selector:
    matchLabels:
      control-plane: controller-backend
      controller-tools.k8s.io: "1.0"
  serviceName: controller-backend-service
  template:
    metadata:
      labels:
        control-plane: controller-backend
        controller-tools.k8s.io: "1.0"
    spec:
      containers:
      - command: ["/backend","-frontend-dir","frontend"]
        image: controller:latest
        imagePullPolicy: Always
        name: backend
        ports:
        - containerPort: 8080
          name: backend
---
apiVersion: v1
kind: Secret
metadata:
  name: webhook-server-secret
  namespace: system
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: controller-backend
  namespace: system
spec:
  rules:
  - host: 114.212.189.141
    http:
      paths:
      - backend:
          serviceName: spark-cluster-controller-backend-service
          servicePort: 8080
        path: /
